{"version":3,"sources":["components/SongInfo.js","components/Player.js","components/LibraryTrack.js","components/Library.js","Data.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["SongInfo","currentTrack","className","alt","name","src","cover","artist","Player","playlist","setCurrentTrackId","isPlaying","setIsPlaying","audioRef","useRef","useState","curTime","duration","animationPercentage","songTiming","setSongTiming","timeUpdateHandler","e","cur","target","currentTime","roundedCurrent","Math","round","roundedDuration","timelineAnimation","transform","getTime","time","floor","slice","skipTrackHandler","direction","a","currentIdx","indexOf","newIdx","length","id","useEffect","current","paused","play","onTimeUpdate","onLoadedMetadata","ref","audio","onEnded","style","background","color","min","max","value","type","onChange","onClick","size","icon","faAngleLeft","pause","faPause","faPlay","faAngleRight","LibraryTrack","track","Library","currentTrackId","isPlaylistOpen","map","Data","uuidv4","Nav","setPlaylistOpen","faMusic","App","useMemo","find","s","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eb40282.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SongInfo = ({ currentTrack }) => {\r\n  return (\r\n    <div className='SongInfo'>\r\n      <img alt={currentTrack.name} src={currentTrack.cover}></img>\r\n      <h2>{currentTrack.name}</h2>\r\n      <h3>{currentTrack.artist}</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SongInfo\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause\r\n} from '@fortawesome/free-solid-svg-icons'\r\nconst Player = ({\r\n  playlist,\r\n  currentTrack,\r\n  setCurrentTrackId,\r\n  isPlaying,\r\n  setIsPlaying\r\n}) => {\r\n  const audioRef = useRef(null)\r\n  const [songTiming, setSongTiming] = useState({\r\n    curTime: 0,\r\n    duration: 0,\r\n    animationPercentage: 0\r\n  })\r\n\r\n  // Event Handlers\r\n  const timeUpdateHandler = e => {\r\n    const cur = e.target.currentTime\r\n    const duration = e.target.duration\r\n    // Calculate percentage for timeline\r\n    const roundedCurrent = Math.round(cur)\r\n    const roundedDuration = Math.round(duration)\r\n    const animationPercentage = Math.round(\r\n      (roundedCurrent / roundedDuration) * 100\r\n    )\r\n    setSongTiming({\r\n      ...songTiming,\r\n      curTime: cur,\r\n      duration,\r\n      animationPercentage\r\n    })\r\n  }\r\n\r\n  const timelineAnimation = {\r\n    transform: `translateX(${songTiming.animationPercentage}%)`\r\n  }\r\n  const playHandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause()\r\n      setIsPlaying(!isPlaying)\r\n    } else {\r\n      audioRef.current.play()\r\n      setIsPlaying(!isPlaying)\r\n    }\r\n  }\r\n\r\n  // Thanks, Stack Overflow\r\n  const getTime = time => {\r\n    return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\r\n  }\r\n\r\n  const dragHandler = e => {\r\n    audioRef.current.currentTime = e.target.value\r\n    setSongTiming({ ...songTiming, curTime: e.target.value })\r\n  }\r\n\r\n  // Skip tracks depending on which button user pressed\r\n  const skipTrackHandler = async direction => {\r\n    let currentIdx = playlist.indexOf(currentTrack)\r\n    let newIdx = currentIdx + direction\r\n    if (newIdx < 0) newIdx = playlist.length - 1\r\n    if (newIdx > playlist.length - 1) newIdx = 0\r\n    await setCurrentTrackId(playlist[newIdx].id)\r\n  }\r\n  // useEffect for switching tracks\r\n  useEffect(() => {\r\n    if (isPlaying && audioRef.current.paused) {\r\n      audioRef.current.play()\r\n    }\r\n  }, [isPlaying, currentTrack])\r\n  return (\r\n    <div className='Player'>\r\n      <audio\r\n        onTimeUpdate={timeUpdateHandler}\r\n        onLoadedMetadata={timeUpdateHandler}\r\n        ref={audioRef}\r\n        src={currentTrack.audio}\r\n        onEnded={() => skipTrackHandler(1)}\r\n      ></audio>\r\n      <div className='timer-controls'>\r\n        <p>{getTime(songTiming.curTime)}</p>\r\n        <div\r\n          style={{\r\n            background: `linear-gradient(to right, ${currentTrack.color[0]}, ${currentTrack.color[1]})`\r\n          }}\r\n          className='timeline'\r\n        >\r\n          <input\r\n            min={0}\r\n            max={songTiming.duration || 0}\r\n            value={songTiming.curTime}\r\n            type='range'\r\n            onChange={dragHandler}\r\n          />\r\n          <div style={timelineAnimation} className='animate-timeline'></div>\r\n        </div>\r\n\r\n        <p>{getTime(songTiming.duration)}</p>\r\n      </div>\r\n      <div className='player-controls'>\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(-1)}\r\n          className='back'\r\n          size='2x'\r\n          icon={faAngleLeft}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playHandler}\r\n          className='play'\r\n          size='2x'\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(1)}\r\n          className='forward'\r\n          size='2x'\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\n\r\nconst LibraryTrack = ({ setCurrentTrackId, track, isPlaying }) => {\r\n  const songSelectHandler = () => {\r\n    setCurrentTrackId(track.id)\r\n  }\r\n  return (\r\n    <div\r\n      onClick={songSelectHandler}\r\n      className={`LibraryTrack ${isPlaying ? 'selected' : ''}`}\r\n    >\r\n      <img alt={track.name} src={track.cover}></img>\r\n      <div className='track-description'>\r\n        <h3>{track.name}</h3>\r\n        <h4>{track.artist}</h4>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LibraryTrack\r\n","import React from 'react'\r\nimport LibraryTrack from './LibraryTrack'\r\nconst Library = ({\r\n  playlist,\r\n  currentTrackId,\r\n  setCurrentTrackId,\r\n  isPlaylistOpen\r\n}) => {\r\n  return (\r\n    <div className={`playlist ${isPlaylistOpen ? 'active-playlist' : ''}`}>\r\n      <h2>Playlist</h2>\r\n      <div className='library-playlist'>\r\n        {playlist.map(track => (\r\n          <LibraryTrack\r\n            playlist={playlist}\r\n            setCurrentTrackId={setCurrentTrackId}\r\n            track={track}\r\n            key={track.id}\r\n            isPlaying={track.id === currentTrackId ? true : false}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Library\r\n","import { v4 as uuidv4 } from 'uuid'\r\nfunction Data() {\r\n  return [\r\n    {\r\n      name: 'Beaver Creek',\r\n      cover:\r\n        'https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg',\r\n      artist: 'Aso, Middle School, Aviino',\r\n      audio: 'https://mp3.chillhop.com/serve.php/?mp3=10075',\r\n      color: ['#205950', '#2ab3bf'],\r\n      id: uuidv4()\r\n    },\r\n    {\r\n      name: 'Daylight',\r\n      cover:\r\n        'https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg',\r\n      artist: 'Aiguille',\r\n      audio: 'https://mp3.chillhop.com/serve.php/?mp3=9272',\r\n      color: ['#EF8EA9', '#ab417f'],\r\n      id: uuidv4()\r\n    },\r\n    {\r\n      name: 'Keep Going',\r\n      cover:\r\n        'https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg',\r\n      artist: 'Swørn',\r\n      audio: 'https://mp3.chillhop.com/serve.php/?mp3=9222',\r\n      color: ['#CD607D', '#c94043'],\r\n      id: uuidv4()\r\n    },\r\n    {\r\n      name: 'Nightfall',\r\n      cover:\r\n        'https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg',\r\n      artist: 'Aiguille',\r\n      audio: 'https://mp3.chillhop.com/serve.php/?mp3=9148',\r\n      color: ['#EF8EA9', '#ab417f'],\r\n      id: uuidv4()\r\n    },\r\n    {\r\n      name: 'Reflection',\r\n      cover:\r\n        'https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg',\r\n      artist: 'Swørn',\r\n      audio: 'https://mp3.chillhop.com/serve.php/?mp3=9228',\r\n      color: ['#CD607D', '#c94043'],\r\n      id: uuidv4()\r\n    },\r\n    {\r\n      name: 'Under the City Stars',\r\n      cover:\r\n        'https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg',\r\n      artist: 'Aso, Middle School, Aviino',\r\n      audio: 'https://mp3.chillhop.com/serve.php/?mp3=10074',\r\n      color: ['#205950', '#2ab3bf'],\r\n      id: uuidv4()\r\n    }\r\n  ]\r\n}\r\n\r\nexport default Data\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMusic } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Nav = ({ isPlaylistOpen, setPlaylistOpen }) => {\r\n  return (\r\n    <nav>\r\n      <h1>Daydream</h1>\r\n      <button onClick={() => setPlaylistOpen(!isPlaylistOpen)}>\r\n        Library\r\n        <FontAwesomeIcon icon={faMusic} />\r\n      </button>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState, useMemo } from 'react'\nimport './styles/app.scss'\nimport SongInfo from './components/SongInfo'\nimport Player from './components/Player'\nimport Library from './components/Library'\nimport Data from './Data'\nimport Nav from './components/Nav'\n\nfunction App() {\n  const [playlist] = useState(Data())\n  const [currentTrackId, setCurrentTrackId] = useState(playlist[0].id)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isPlaylistOpen, setPlaylistOpen] = useState(false)\n\n  const currentTrack = useMemo(\n    () => playlist.find(s => s.id === currentTrackId),\n    [playlist, currentTrackId]\n  )\n  return (\n    <div className='App'>\n      <Nav isPlaylistOpen={isPlaylistOpen} setPlaylistOpen={setPlaylistOpen} />\n      <SongInfo currentTrack={currentTrack} />\n      <Player\n        playlist={playlist}\n        currentTrack={currentTrack}\n        setCurrentTrackId={setCurrentTrackId}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n      />\n      <Library\n        playlist={playlist}\n        currentTrackId={currentTrackId}\n        setCurrentTrackId={setCurrentTrackId}\n        isPlaylistOpen={isPlaylistOpen}\n      />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}